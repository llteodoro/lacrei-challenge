name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-2'
  ECR_REPOSITORY: 'lacrei-node-api'
  CONTAINER_NAME: 'lacrei-node-api'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install
      
    - name: Run tests
      run: npm test

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Atualizado para v4
      
      - name: Build Docker image
        run: docker build -t ${{ env.CONTAINER_NAME }} .
      
      - name: Start API in background
        run: |
          docker run -d \
            -p 3000:3000 \
            --name ${{ env.CONTAINER_NAME }}-scan \
            ${{ env.CONTAINER_NAME }}
          sleep 20  # Tempo aumentado para garantir inicialização
          docker ps -a
          curl -v http://localhost:3000/status || true
      
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v1.0.0  # Versão mais recente
        with:
          target: 'http://localhost:3000'
          docker_name: 'owasp/zap2docker-stable'
          cmd_options: '-a -j -t http://localhost:3000'
          fail_action: false
      
      - name: Stop and remove container
        if: always()
        run: |
          docker stop ${{ env.CONTAINER_NAME }}-scan || true
          docker rm ${{ env.CONTAINER_NAME }}-scan || true
      
      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4  # Atualizado para v4
        with:
          name: zap-scan-report
          path: zap-report.html
          retention-days: 5

  build-and-push-ecr:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      run: |
        DOCKER_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/lacrei-node-api:latest
        docker build -t $DOCKER_IMAGE .
        docker push $DOCKER_IMAGE
        
        # Atualiza o arquivo task-definition.json
        sed -i 's|"image": ".*"|"image": "'"$DOCKER_IMAGE"'"|' task-definition.json
        cat task-definition.json

  deploy-ecs:
    needs: build-and-push-ecr
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Deploy to ECS
      env:
        ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
        ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
      run: |
        NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --region us-east-2 \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $NEW_TASK_DEFINITION \
          --region us-east-2